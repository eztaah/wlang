static Void print_usage(Void)
{
    printf("Usage:\n");
    printf("    compiler <file.cp> [options]    compile a source file with optional flags.\n");
    printf("    compiler --version              display compiler version and exit.\n");
    printf("    compiler --help                 display this help message and exit.\n");
    printf("\nOptions:\n");
    printf("    -d, --dev-mode                  activate dev mode\n");
    printf("    -e, --to-executable             assemble and link the asmed assembly code into an executable\n");
    printf("                                        - GNU assembler (as) and GNU linker (ld) will be needed during compilation time.\n");
    printf("                                        - the asmed executable will only run on x86_64 architecture and requires a Linux system with the GNU C Library (glibc).\n");
    printf("\n");
}

-----------------------------------------

{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "w",
    "patterns": [
        {
            "include": "#comment"
        },
        {
            "include": "#keyword"
        },
        {
            "include": "#symbol"
        },
        {
            "include": "#type"
        },
        {
            "include": "#function_name"
        },
        {
            "include": "#number"
        },
        {
            "include": "#string"
        }
    ],    
    "repository": {
        "comment": {
            "patterns": [
                {
                    "name": "comment.line.w",
                    "match": "#.+"
                },
                {
                    "name": "comment.line.w",
                    "begin": "\"\"\"",
                    "end": "\"\"\"",
                    "patterns": [
                        {
                            "name": "comment.line.w",
                            "match": ".|\n"
                        }
                    ]
                }
            ]
        },
        "keyword": {
            "patterns": [
                {
                    "name": "keyword.control.w",
                    "match": "\\b(if|elif|else|while|for|cst|var|fun|return|from|import|export|replace|by)\\b"
                }
            ]
        },
        "symbol": {
            "patterns": [
                {
                    "name": "keyword.control.w",
                    "match": "\\&\\&|\\|\\||[\\+\\-\\*/%|^=!<>]"
                },
                {
                    "name": "keyword.control.w",
                    "match": "(?<!&)\\&(?![a-zA-Z0-9_])"
                }
            ]
        },  
        "type": {
            "patterns": [
                {
                    "name": "entity.name.type",
                    "match": "\\b(I32|B32|C8|Void)\\b"
                },
                {
                    "name": "entity.name.type",
                    "match": "&(?:I32|B32|C8|Void)"
                }
            ]
        },    
        "function_name": {
            "patterns": [
                {
                    "name": "entity.name.function.w",
                    "match": "\\b([a-zA-Z_][a-zA-Z0-9_]*)\\s*(?=\\()"
                },
                {
                    "name": "entity.name.function.w",
                    "match": "\\b[a-zA-Z_][a-zA-Z0-9_]*\\b(?=\\s*from\\b|\\s*\\b%import)"
                }
            ]
        },
        "number": {
            "patterns": [
                {
                    "name": "constant.numeric.w",
                    "match": "\\b(0b[01]+|\\d+\\.?\\d*)\\b"
                }
            ]
        },
        "string": {
            "patterns": [
                {
                    "name": "string.w",
                    "match": "\".*?\""
                }
            ]
        }
    },
	"scopeName": "source.w"
}