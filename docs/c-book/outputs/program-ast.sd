# Program AST

program = Program(function_declaration*)

declaration = FunDecl(function_declaration) | VarDecl(variable_declaration)

variable_declaration = (identifier name, exp? init)

function_declaration = (identifier name, identifier* params, block? body)

block_item = S(statement) | D(declaration)

block = Block(block_item*)

for_init = InitDecl(variable_declaration) | InitExp(exp?)

statement = Return(exp)

          | Expression(exp)

          | If(exp condition, statement then, statement? else)

          | Compound(block)

          | Break

          | Continue

          | While(exp condition, statement body)

          | DoWhile(statement body, exp condition)

          | For(for_init init, exp? condition, exp? post, statement body)

          | Null

exp = Constant(int)

    | Var(identifier)

    | Unary(unary_operator, exp)

    | Binary(binary_operator, exp, exp)

    | Assignment(exp, exp)

    | Conditional(exp condition, exp, exp)

    | FunctionCall(identifier, exp* args)

unary_operator = Complement | Negate | Not

binary_operator = Add | Subtract | Multiply | Divide | Remainder | And | Or

                | Equal | NotEqual | LessThan | LessOrEqual

                | GreaterThan | GreaterOrEqual





