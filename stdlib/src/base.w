: prints the version of the libw library.
glb print_libw_version()
{
    !wstr& <64> version[11] = "libw 1.0.0\n";
    print_wstr(version, 11);
}

: exits the program with a given status code.
:
: this function serves as a low-level interface to the operating system's exit system call.
: the status code is passed as a 64-bit integer but will be interpreted as an unsigned 8-bit integer.
: 
: the function triggers a syscall (system call) to terminate the program with the given status.
glb exit(<64> status)
{
#ifdef C_EXIT
    @exit(status);
#else
    %sysc(60, status, 0, 0, 0, 0, 0);
#endif
}

: suspends execution for the specified duration in second and nanoseconds using the nanosleep system call
: 
: the function may fail and exit the program if there is an issue with memory allocation
_nanosleep(<64> seconds, <64> nanoseconds)
{
    !timespec_struct <64> timespec = malloc(16);
    ^(timespec + 0) = seconds;
    ^(timespec + 8) = nanoseconds;

    %sysc(35, timespec, 0, 0, 0, 0, 0);

    free(timespec);
}

: suspends execution for the specified duration in milliseconds
: 
: this function is a wrapper around the nanosleep function. it converts milliseconds into seconds and nanoseconds and calls nanosleep
glb sleep(<64> milliseconds)
{
#ifdef C_SLEEP
    <64> microseconds = milliseconds * 1000;
    @usleep(microseconds);
#else
    : convert milliseconds to seconds and nanoseconds and call _nanosleep
    <64> seconds = milliseconds / 1000;
    <64> nanoseconds = (milliseconds % 1000) * 1000000;
    _nanosleep(seconds, nanoseconds);
#endif
}

: seeds the random number generator with the current time
:
: this function seeds the random number generator using the current system time.
: the `srand` function is called with the current time as the seed, ensuring that
: the sequence of random numbers generated by subsequent calls to `rand` will vary 
: with each execution of the program.
glb srand()
{
    <64> current_time = @time(0);
    @srand(current_time); 
}

: generates a random number
:
: this function returns a random number generated by the standard C `rand` function.
: the function should be called after `srand` has been used to seed the random number 
: generator, otherwise the sequence of random numbers may start from the same point 
: each time the program runs.
glb <64> rand()
{
    ret @rand();
}

: compares two wide strings (wstr) for equality
:
: this function compares two wide strings (`wstr1` and `wstr2`) to determine if they are equal.
: it returns `1` if the strings are equal and `0` if they are different. the comparison is 
: performed character by character.
glb <64> wstr_cmp(!wstr& <64> wstr1, !wstr& <64> wstr2, <64> str_size1, <64> str_size2)
{
    : If the sizes are different, the strings cannot be equal
    if (str_size1 != str_size2) {
        ret 0;
    }

    : Compare each character in the strings
    <64> i = 1;
    loop {
        if (i == str_size1 + 1) {
            break;
        }

        !aiic <64> char1 = ^(wstr1 - i*8);
        !aiic <64> char2 = ^(wstr2 - i*8);

        if (char1 != char2) {
            ret 0;
        }

        i = i + 1;
    }

    : If we reach this point, the strings are equal
    ret 1;
}

